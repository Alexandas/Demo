/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	BaseContract,
	ContractTransaction,
	Overrides,
	CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EcommerceNFTInterface extends ethers.utils.Interface {
	functions: {
		"addGoods(string,uint256,uint256,bytes)": FunctionFragment;
		"addMerchant()": FunctionFragment;
		"addSupply(uint256,uint256,bytes)": FunctionFragment;
		"balanceOf(address,uint256)": FunctionFragment;
		"balanceOfBatch(address[],uint256[])": FunctionFragment;
		"burn(uint256,uint256)": FunctionFragment;
		"burnBatch(address,uint256[],uint256[])": FunctionFragment;
		"buy(address,address,uint256,uint256,bytes)": FunctionFragment;
		"edit(uint256,uint256,uint256,string,bytes)": FunctionFragment;
		"goodsMerchants(uint256)": FunctionFragment;
		"goodsPrice(uint256)": FunctionFragment;
		"isApprovedForAll(address,address)": FunctionFragment;
		"isMerchant(address)": FunctionFragment;
		"merchants(address)": FunctionFragment;
		"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
		"safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
		"setApprovalForAll(address,bool)": FunctionFragment;
		"setGoodsURI(uint256,string)": FunctionFragment;
		"setPrice(uint256,uint256)": FunctionFragment;
		"supportsInterface(bytes4)": FunctionFragment;
		"token()": FunctionFragment;
		"uri(uint256)": FunctionFragment;
	};

	encodeFunctionData(
		functionFragment: "addGoods",
		values: [string, BigNumberish, BigNumberish, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "addMerchant",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "addSupply",
		values: [BigNumberish, BigNumberish, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "balanceOf",
		values: [string, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "balanceOfBatch",
		values: [string[], BigNumberish[]]
	): string;
	encodeFunctionData(
		functionFragment: "burn",
		values: [BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "burnBatch",
		values: [string, BigNumberish[], BigNumberish[]]
	): string;
	encodeFunctionData(
		functionFragment: "buy",
		values: [string, string, BigNumberish, BigNumberish, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "edit",
		values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "goodsMerchants",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "goodsPrice",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "isApprovedForAll",
		values: [string, string]
	): string;
	encodeFunctionData(functionFragment: "isMerchant", values: [string]): string;
	encodeFunctionData(functionFragment: "merchants", values: [string]): string;
	encodeFunctionData(
		functionFragment: "safeBatchTransferFrom",
		values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "safeTransferFrom",
		values: [string, string, BigNumberish, BigNumberish, BytesLike]
	): string;
	encodeFunctionData(
		functionFragment: "setApprovalForAll",
		values: [string, boolean]
	): string;
	encodeFunctionData(
		functionFragment: "setGoodsURI",
		values: [BigNumberish, string]
	): string;
	encodeFunctionData(
		functionFragment: "setPrice",
		values: [BigNumberish, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "supportsInterface",
		values: [BytesLike]
	): string;
	encodeFunctionData(functionFragment: "token", values?: undefined): string;
	encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

	decodeFunctionResult(functionFragment: "addGoods", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "addMerchant",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "addSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "balanceOfBatch",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "edit", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "goodsMerchants",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "goodsPrice", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "isApprovedForAll",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "isMerchant", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "merchants", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "safeBatchTransferFrom",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "safeTransferFrom",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setApprovalForAll",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setGoodsURI",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "supportsInterface",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

	events: {
		"AddGoods(uint256,address,string,uint256,uint256)": EventFragment;
		"AddMerchant(address)": EventFragment;
		"AddSupply(uint256,address,uint256)": EventFragment;
		"ApprovalForAll(address,address,bool)": EventFragment;
		"Buy(address,address,uint256,uint256,uint256)": EventFragment;
		"PriceUpdated(uint256,uint256)": EventFragment;
		"TokenUpdated(address)": EventFragment;
		"TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
		"TransferSingle(address,address,address,uint256,uint256)": EventFragment;
		"URI(string,uint256)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "AddGoods"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "AddMerchant"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "AddSupply"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
	getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type AddGoodsEvent = TypedEvent<
	[BigNumber, string, string, BigNumber, BigNumber] & {
		id: BigNumber;
		merchant: string;
		uri: string;
		price: BigNumber;
		amount: BigNumber;
	}
>;

export type AddMerchantEvent = TypedEvent<[string] & { merchant: string }>;

export type AddSupplyEvent = TypedEvent<
	[BigNumber, string, BigNumber] & {
		id: BigNumber;
		merchant: string;
		amount: BigNumber;
	}
>;

export type ApprovalForAllEvent = TypedEvent<
	[string, string, boolean] & {
		account: string;
		operator: string;
		approved: boolean;
	}
>;

export type BuyEvent = TypedEvent<
	[string, string, BigNumber, BigNumber, BigNumber] & {
		merchant: string;
		to: string;
		id: BigNumber;
		amount: BigNumber;
		value: BigNumber;
	}
>;

export type PriceUpdatedEvent = TypedEvent<
	[BigNumber, BigNumber] & { id: BigNumber; price: BigNumber }
>;

export type TokenUpdatedEvent = TypedEvent<[string] & { token: string }>;

export type TransferBatchEvent = TypedEvent<
	[string, string, string, BigNumber[], BigNumber[]] & {
		operator: string;
		from: string;
		to: string;
		ids: BigNumber[];
		values: BigNumber[];
	}
>;

export type TransferSingleEvent = TypedEvent<
	[string, string, string, BigNumber, BigNumber] & {
		operator: string;
		from: string;
		to: string;
		id: BigNumber;
		value: BigNumber;
	}
>;

export type URIEvent = TypedEvent<
	[string, BigNumber] & { value: string; id: BigNumber }
>;

export class EcommerceNFT extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: EcommerceNFTInterface;

	functions: {
		addGoods(
			uri: string,
			amount: BigNumberish,
			price: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		addMerchant(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		addSupply(
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		balanceOf(
			account: string,
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<[BigNumber[]]>;

		"burn(uint256,uint256)"(
			id: BigNumberish,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		"burn(address,uint256,uint256)"(
			account: string,
			id: BigNumberish,
			value: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		burnBatch(
			account: string,
			ids: BigNumberish[],
			values: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		buy(
			merchant: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		edit(
			id: BigNumberish,
			amount: BigNumberish,
			price: BigNumberish,
			uri: string,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		goodsMerchants(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<[string]>;

		goodsPrice(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		isMerchant(merchant: string, overrides?: CallOverrides): Promise<[boolean]>;

		merchants(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

		safeBatchTransferFrom(
			from: string,
			to: string,
			ids: BigNumberish[],
			amounts: BigNumberish[],
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		safeTransferFrom(
			from: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setGoodsURI(
			id: BigNumberish,
			uri: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setPrice(
			id: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		token(overrides?: CallOverrides): Promise<[string]>;

		uri(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
	};

	addGoods(
		uri: string,
		amount: BigNumberish,
		price: BigNumberish,
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	addMerchant(
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	addSupply(
		id: BigNumberish,
		amount: BigNumberish,
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	balanceOf(
		account: string,
		id: BigNumberish,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	balanceOfBatch(
		accounts: string[],
		ids: BigNumberish[],
		overrides?: CallOverrides
	): Promise<BigNumber[]>;

	"burn(uint256,uint256)"(
		id: BigNumberish,
		amount: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	"burn(address,uint256,uint256)"(
		account: string,
		id: BigNumberish,
		value: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	burnBatch(
		account: string,
		ids: BigNumberish[],
		values: BigNumberish[],
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	buy(
		merchant: string,
		to: string,
		id: BigNumberish,
		amount: BigNumberish,
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	edit(
		id: BigNumberish,
		amount: BigNumberish,
		price: BigNumberish,
		uri: string,
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	goodsMerchants(
		arg0: BigNumberish,
		overrides?: CallOverrides
	): Promise<string>;

	goodsPrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

	isApprovedForAll(
		account: string,
		operator: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	isMerchant(merchant: string, overrides?: CallOverrides): Promise<boolean>;

	merchants(arg0: string, overrides?: CallOverrides): Promise<boolean>;

	safeBatchTransferFrom(
		from: string,
		to: string,
		ids: BigNumberish[],
		amounts: BigNumberish[],
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	safeTransferFrom(
		from: string,
		to: string,
		id: BigNumberish,
		amount: BigNumberish,
		data: BytesLike,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setApprovalForAll(
		operator: string,
		approved: boolean,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setGoodsURI(
		id: BigNumberish,
		uri: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setPrice(
		id: BigNumberish,
		price: BigNumberish,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	supportsInterface(
		interfaceId: BytesLike,
		overrides?: CallOverrides
	): Promise<boolean>;

	token(overrides?: CallOverrides): Promise<string>;

	uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

	callStatic: {
		addGoods(
			uri: string,
			amount: BigNumberish,
			price: BigNumberish,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		addMerchant(overrides?: CallOverrides): Promise<void>;

		addSupply(
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		balanceOf(
			account: string,
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<BigNumber[]>;

		"burn(uint256,uint256)"(
			id: BigNumberish,
			amount: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		"burn(address,uint256,uint256)"(
			account: string,
			id: BigNumberish,
			value: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		burnBatch(
			account: string,
			ids: BigNumberish[],
			values: BigNumberish[],
			overrides?: CallOverrides
		): Promise<void>;

		buy(
			merchant: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		edit(
			id: BigNumberish,
			amount: BigNumberish,
			price: BigNumberish,
			uri: string,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		goodsMerchants(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<string>;

		goodsPrice(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		isMerchant(merchant: string, overrides?: CallOverrides): Promise<boolean>;

		merchants(arg0: string, overrides?: CallOverrides): Promise<boolean>;

		safeBatchTransferFrom(
			from: string,
			to: string,
			ids: BigNumberish[],
			amounts: BigNumberish[],
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		safeTransferFrom(
			from: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: CallOverrides
		): Promise<void>;

		setGoodsURI(
			id: BigNumberish,
			uri: string,
			overrides?: CallOverrides
		): Promise<void>;

		setPrice(
			id: BigNumberish,
			price: BigNumberish,
			overrides?: CallOverrides
		): Promise<void>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<boolean>;

		token(overrides?: CallOverrides): Promise<string>;

		uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;
	};

	filters: {
		"AddGoods(uint256,address,string,uint256,uint256)"(
			id?: null,
			merchant?: null,
			uri?: null,
			price?: null,
			amount?: null
		): TypedEventFilter<
			[BigNumber, string, string, BigNumber, BigNumber],
			{
				id: BigNumber;
				merchant: string;
				uri: string;
				price: BigNumber;
				amount: BigNumber;
			}
		>;

		AddGoods(
			id?: null,
			merchant?: null,
			uri?: null,
			price?: null,
			amount?: null
		): TypedEventFilter<
			[BigNumber, string, string, BigNumber, BigNumber],
			{
				id: BigNumber;
				merchant: string;
				uri: string;
				price: BigNumber;
				amount: BigNumber;
			}
		>;

		"AddMerchant(address)"(
			merchant?: null
		): TypedEventFilter<[string], { merchant: string }>;

		AddMerchant(
			merchant?: null
		): TypedEventFilter<[string], { merchant: string }>;

		"AddSupply(uint256,address,uint256)"(
			id?: null,
			merchant?: null,
			amount?: null
		): TypedEventFilter<
			[BigNumber, string, BigNumber],
			{ id: BigNumber; merchant: string; amount: BigNumber }
		>;

		AddSupply(
			id?: null,
			merchant?: null,
			amount?: null
		): TypedEventFilter<
			[BigNumber, string, BigNumber],
			{ id: BigNumber; merchant: string; amount: BigNumber }
		>;

		"ApprovalForAll(address,address,bool)"(
			account?: string | null,
			operator?: string | null,
			approved?: null
		): TypedEventFilter<
			[string, string, boolean],
			{ account: string; operator: string; approved: boolean }
		>;

		ApprovalForAll(
			account?: string | null,
			operator?: string | null,
			approved?: null
		): TypedEventFilter<
			[string, string, boolean],
			{ account: string; operator: string; approved: boolean }
		>;

		"Buy(address,address,uint256,uint256,uint256)"(
			merchant?: null,
			to?: null,
			id?: null,
			amount?: null,
			value?: null
		): TypedEventFilter<
			[string, string, BigNumber, BigNumber, BigNumber],
			{
				merchant: string;
				to: string;
				id: BigNumber;
				amount: BigNumber;
				value: BigNumber;
			}
		>;

		Buy(
			merchant?: null,
			to?: null,
			id?: null,
			amount?: null,
			value?: null
		): TypedEventFilter<
			[string, string, BigNumber, BigNumber, BigNumber],
			{
				merchant: string;
				to: string;
				id: BigNumber;
				amount: BigNumber;
				value: BigNumber;
			}
		>;

		"PriceUpdated(uint256,uint256)"(
			id?: null,
			price?: null
		): TypedEventFilter<
			[BigNumber, BigNumber],
			{ id: BigNumber; price: BigNumber }
		>;

		PriceUpdated(
			id?: null,
			price?: null
		): TypedEventFilter<
			[BigNumber, BigNumber],
			{ id: BigNumber; price: BigNumber }
		>;

		"TokenUpdated(address)"(
			token?: null
		): TypedEventFilter<[string], { token: string }>;

		TokenUpdated(token?: null): TypedEventFilter<[string], { token: string }>;

		"TransferBatch(address,address,address,uint256[],uint256[])"(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			ids?: null,
			values?: null
		): TypedEventFilter<
			[string, string, string, BigNumber[], BigNumber[]],
			{
				operator: string;
				from: string;
				to: string;
				ids: BigNumber[];
				values: BigNumber[];
			}
		>;

		TransferBatch(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			ids?: null,
			values?: null
		): TypedEventFilter<
			[string, string, string, BigNumber[], BigNumber[]],
			{
				operator: string;
				from: string;
				to: string;
				ids: BigNumber[];
				values: BigNumber[];
			}
		>;

		"TransferSingle(address,address,address,uint256,uint256)"(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			id?: null,
			value?: null
		): TypedEventFilter<
			[string, string, string, BigNumber, BigNumber],
			{
				operator: string;
				from: string;
				to: string;
				id: BigNumber;
				value: BigNumber;
			}
		>;

		TransferSingle(
			operator?: string | null,
			from?: string | null,
			to?: string | null,
			id?: null,
			value?: null
		): TypedEventFilter<
			[string, string, string, BigNumber, BigNumber],
			{
				operator: string;
				from: string;
				to: string;
				id: BigNumber;
				value: BigNumber;
			}
		>;

		"URI(string,uint256)"(
			value?: null,
			id?: BigNumberish | null
		): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

		URI(
			value?: null,
			id?: BigNumberish | null
		): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
	};

	estimateGas: {
		addGoods(
			uri: string,
			amount: BigNumberish,
			price: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		addMerchant(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		addSupply(
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		balanceOf(
			account: string,
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<BigNumber>;

		"burn(uint256,uint256)"(
			id: BigNumberish,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		"burn(address,uint256,uint256)"(
			account: string,
			id: BigNumberish,
			value: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		burnBatch(
			account: string,
			ids: BigNumberish[],
			values: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		buy(
			merchant: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		edit(
			id: BigNumberish,
			amount: BigNumberish,
			price: BigNumberish,
			uri: string,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		goodsMerchants(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		goodsPrice(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isMerchant(merchant: string, overrides?: CallOverrides): Promise<BigNumber>;

		merchants(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

		safeBatchTransferFrom(
			from: string,
			to: string,
			ids: BigNumberish[],
			amounts: BigNumberish[],
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		safeTransferFrom(
			from: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setGoodsURI(
			id: BigNumberish,
			uri: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setPrice(
			id: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		token(overrides?: CallOverrides): Promise<BigNumber>;

		uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		addGoods(
			uri: string,
			amount: BigNumberish,
			price: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		addMerchant(
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		addSupply(
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		balanceOf(
			account: string,
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		balanceOfBatch(
			accounts: string[],
			ids: BigNumberish[],
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		"burn(uint256,uint256)"(
			id: BigNumberish,
			amount: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		"burn(address,uint256,uint256)"(
			account: string,
			id: BigNumberish,
			value: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		burnBatch(
			account: string,
			ids: BigNumberish[],
			values: BigNumberish[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		buy(
			merchant: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		edit(
			id: BigNumberish,
			amount: BigNumberish,
			price: BigNumberish,
			uri: string,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		goodsMerchants(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		goodsPrice(
			arg0: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		isApprovedForAll(
			account: string,
			operator: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		isMerchant(
			merchant: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		merchants(
			arg0: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		safeBatchTransferFrom(
			from: string,
			to: string,
			ids: BigNumberish[],
			amounts: BigNumberish[],
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		safeTransferFrom(
			from: string,
			to: string,
			id: BigNumberish,
			amount: BigNumberish,
			data: BytesLike,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setApprovalForAll(
			operator: string,
			approved: boolean,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setGoodsURI(
			id: BigNumberish,
			uri: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setPrice(
			id: BigNumberish,
			price: BigNumberish,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		supportsInterface(
			interfaceId: BytesLike,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		uri(
			id: BigNumberish,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;
	};
}
